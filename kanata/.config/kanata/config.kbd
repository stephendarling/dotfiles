(defcfg
  process-unmapped-keys yes
)
(defsrc
  f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 
  0
  r
  caps a s d f h j k l ;
  x c m ,
)
(defvar
  tap-time 250
  hold-time 200

  left-hand-keys (
    q w e r t
    a s d f g
    z x c v
    spc
  )
  right-hand-keys (
    y u i o p
    h j k l ;
    b n m , . /
    spc
  )
)
(deflayer base
  brdn brup _  _  _  _  prev pp next mute vold volu
  0
  r
  @esc a s @d @f h @j @k l ;
  @x @c @m @,
)
(deflayer nomods
  brdn brup _  _  _  _  prev pp next mute vold volu
  0
  r
  esc  a s d f h j k l ;
  x c m ,
)
(deflayer alt-layer
  brdn brup _  _  _  _  prev pp next mute vold volu
  caps
  lrld
  _    _ _ _ _ left down up right _
  _ _ _ _
)
(deffakekeys
  to-base (layer-switch base)
)
(defalias
  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 5)
  )

  lhyper (multi lsft lalt lctl lmet)
  lmeh (multi lsft lalt lctl)
  rhyper (multi rsft ralt rctl rmet)
  rmeh (multi rsft ralt rctl)


  esc (tap-hold-press $tap-time $hold-time esc (layer-while-held alt-layer))
  x (tap-hold-release-keys $tap-time $hold-time (multi x @tap) @lhyper $left-hand-keys)
  c (tap-hold-release-keys $tap-time $hold-time (multi c @tap) @lmeh $left-hand-keys)
  d (tap-hold-release-keys $tap-time $hold-time (multi d @tap) lctl $left-hand-keys)
  f (tap-hold-release-keys $tap-time $hold-time (multi f @tap) lalt $left-hand-keys)
  j (tap-hold-release-keys $tap-time $hold-time (multi j @tap) ralt $right-hand-keys)
  k (tap-hold-release-keys $tap-time $hold-time (multi k @tap) rctl $right-hand-keys)
  m (tap-hold-release-keys $tap-time $hold-time (multi m @tap) @rmeh $right-hand-keys)
  , (tap-hold-release-keys $tap-time $hold-time (multi , @tap) @rhyper $right-hand-keys)
)